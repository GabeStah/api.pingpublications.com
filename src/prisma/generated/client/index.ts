// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from 'graphql';
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from 'prisma-client-lib';
import { typeDefs } from './prisma-schema';

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  commit: (where?: CommitWhereInput) => Promise<boolean>;
  organization: (where?: OrganizationWhereInput) => Promise<boolean>;
  owner: (where?: OwnerWhereInput) => Promise<boolean>;
  repository: (where?: RepositoryWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  commit: (where: CommitWhereUniqueInput) => CommitNullablePromise;
  commits: (args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Commit>;
  commitsConnection: (args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommitConnectionPromise;
  organization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationNullablePromise;
  organizations: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Organization>;
  organizationsConnection: (args?: {
    where?: OrganizationWhereInput;
    orderBy?: OrganizationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrganizationConnectionPromise;
  owner: (where: OwnerWhereUniqueInput) => OwnerNullablePromise;
  owners: (args?: {
    where?: OwnerWhereInput;
    orderBy?: OwnerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Owner>;
  ownersConnection: (args?: {
    where?: OwnerWhereInput;
    orderBy?: OwnerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OwnerConnectionPromise;
  repository: (where: RepositoryWhereUniqueInput) => RepositoryNullablePromise;
  repositories: (args?: {
    where?: RepositoryWhereInput;
    orderBy?: RepositoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Repository>;
  repositoriesConnection: (args?: {
    where?: RepositoryWhereInput;
    orderBy?: RepositoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => RepositoryConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCommit: (data: CommitCreateInput) => CommitPromise;
  updateCommit: (args: {
    data: CommitUpdateInput;
    where: CommitWhereUniqueInput;
  }) => CommitPromise;
  updateManyCommits: (args: {
    data: CommitUpdateManyMutationInput;
    where?: CommitWhereInput;
  }) => BatchPayloadPromise;
  upsertCommit: (args: {
    where: CommitWhereUniqueInput;
    create: CommitCreateInput;
    update: CommitUpdateInput;
  }) => CommitPromise;
  deleteCommit: (where: CommitWhereUniqueInput) => CommitPromise;
  deleteManyCommits: (where?: CommitWhereInput) => BatchPayloadPromise;
  createOrganization: (data: OrganizationCreateInput) => OrganizationPromise;
  updateOrganization: (args: {
    data: OrganizationUpdateInput;
    where: OrganizationWhereUniqueInput;
  }) => OrganizationPromise;
  updateManyOrganizations: (args: {
    data: OrganizationUpdateManyMutationInput;
    where?: OrganizationWhereInput;
  }) => BatchPayloadPromise;
  upsertOrganization: (args: {
    where: OrganizationWhereUniqueInput;
    create: OrganizationCreateInput;
    update: OrganizationUpdateInput;
  }) => OrganizationPromise;
  deleteOrganization: (
    where: OrganizationWhereUniqueInput
  ) => OrganizationPromise;
  deleteManyOrganizations: (
    where?: OrganizationWhereInput
  ) => BatchPayloadPromise;
  createOwner: (data: OwnerCreateInput) => OwnerPromise;
  updateOwner: (args: {
    data: OwnerUpdateInput;
    where: OwnerWhereUniqueInput;
  }) => OwnerPromise;
  updateManyOwners: (args: {
    data: OwnerUpdateManyMutationInput;
    where?: OwnerWhereInput;
  }) => BatchPayloadPromise;
  upsertOwner: (args: {
    where: OwnerWhereUniqueInput;
    create: OwnerCreateInput;
    update: OwnerUpdateInput;
  }) => OwnerPromise;
  deleteOwner: (where: OwnerWhereUniqueInput) => OwnerPromise;
  deleteManyOwners: (where?: OwnerWhereInput) => BatchPayloadPromise;
  createRepository: (data: RepositoryCreateInput) => RepositoryPromise;
  updateRepository: (args: {
    data: RepositoryUpdateInput;
    where: RepositoryWhereUniqueInput;
  }) => RepositoryPromise;
  updateManyRepositories: (args: {
    data: RepositoryUpdateManyMutationInput;
    where?: RepositoryWhereInput;
  }) => BatchPayloadPromise;
  upsertRepository: (args: {
    where: RepositoryWhereUniqueInput;
    create: RepositoryCreateInput;
    update: RepositoryUpdateInput;
  }) => RepositoryPromise;
  deleteRepository: (where: RepositoryWhereUniqueInput) => RepositoryPromise;
  deleteManyRepositories: (where?: RepositoryWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  commit: (
    where?: CommitSubscriptionWhereInput
  ) => CommitSubscriptionPayloadSubscription;
  organization: (
    where?: OrganizationSubscriptionWhereInput
  ) => OrganizationSubscriptionPayloadSubscription;
  owner: (
    where?: OwnerSubscriptionWhereInput
  ) => OwnerSubscriptionPayloadSubscription;
  repository: (
    where?: RepositorySubscriptionWhereInput
  ) => RepositorySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CommitStatus = 'Pending' | 'Processed';

export type CommitOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'committedDate_ASC'
  | 'committedDate_DESC'
  | 'hash_ASC'
  | 'hash_DESC'
  | 'message_ASC'
  | 'message_DESC'
  | 'messageHeadline_ASC'
  | 'messageHeadline_DESC'
  | 'status_ASC'
  | 'status_DESC';

export type OrganizationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC';

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'handle_ASC'
  | 'handle_DESC';

export type OwnerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC';

export type RepositoryServiceType = 'GitHub' | 'GitLab' | 'Bitbucket';

export type RepositoryOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'service_ASC'
  | 'service_DESC';

export type MutationType = 'CREATED' | 'UPDATED' | 'DELETED';

export interface UserUpdateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export type CommitWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  hash?: Maybe<String>;
}>;

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface CommitWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  author_every?: Maybe<UserWhereInput>;
  author_some?: Maybe<UserWhereInput>;
  author_none?: Maybe<UserWhereInput>;
  committedDate?: Maybe<DateTimeInput>;
  committedDate_not?: Maybe<DateTimeInput>;
  committedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  committedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  committedDate_lt?: Maybe<DateTimeInput>;
  committedDate_lte?: Maybe<DateTimeInput>;
  committedDate_gt?: Maybe<DateTimeInput>;
  committedDate_gte?: Maybe<DateTimeInput>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  messageHeadline?: Maybe<String>;
  messageHeadline_not?: Maybe<String>;
  messageHeadline_in?: Maybe<String[] | String>;
  messageHeadline_not_in?: Maybe<String[] | String>;
  messageHeadline_lt?: Maybe<String>;
  messageHeadline_lte?: Maybe<String>;
  messageHeadline_gt?: Maybe<String>;
  messageHeadline_gte?: Maybe<String>;
  messageHeadline_contains?: Maybe<String>;
  messageHeadline_not_contains?: Maybe<String>;
  messageHeadline_starts_with?: Maybe<String>;
  messageHeadline_not_starts_with?: Maybe<String>;
  messageHeadline_ends_with?: Maybe<String>;
  messageHeadline_not_ends_with?: Maybe<String>;
  status?: Maybe<CommitStatus>;
  status_not?: Maybe<CommitStatus>;
  status_in?: Maybe<CommitStatus[] | CommitStatus>;
  status_not_in?: Maybe<CommitStatus[] | CommitStatus>;
  AND?: Maybe<CommitWhereInput[] | CommitWhereInput>;
  OR?: Maybe<CommitWhereInput[] | CommitWhereInput>;
  NOT?: Maybe<CommitWhereInput[] | CommitWhereInput>;
}

export interface OwnerUpsertNestedInput {
  update: OwnerUpdateDataInput;
  create: OwnerCreateInput;
}

export interface OrganizationUpdateInput {
  users?: Maybe<UserUpdateManyInput>;
  handle?: Maybe<String>;
}

export interface OwnerUpdateDataInput {
  handle?: Maybe<String>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  handle?: Maybe<String>;
}

export interface OwnerUpdateOneRequiredInput {
  create?: Maybe<OwnerCreateInput>;
  update?: Maybe<OwnerUpdateDataInput>;
  upsert?: Maybe<OwnerUpsertNestedInput>;
  connect?: Maybe<OwnerWhereUniqueInput>;
}

export interface RepositorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<RepositoryWhereInput>;
  AND?: Maybe<
    RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput
  >;
  OR?: Maybe<
    RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput
  >;
  NOT?: Maybe<
    RepositorySubscriptionWhereInput[] | RepositorySubscriptionWhereInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  handle?: Maybe<String>;
}>;

export type OrganizationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  handle?: Maybe<String>;
}>;

export interface RepositoryUpdateInput {
  name?: Maybe<String>;
  owner?: Maybe<OwnerUpdateOneRequiredInput>;
  service?: Maybe<RepositoryServiceType>;
  commits?: Maybe<CommitUpdateManyInput>;
}

export interface OrganizationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  AND?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  OR?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
  NOT?: Maybe<OrganizationWhereInput[] | OrganizationWhereInput>;
}

export interface CommitCreateManyInput {
  create?: Maybe<CommitCreateInput[] | CommitCreateInput>;
  connect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  handle?: Maybe<String>;
}

export interface OwnerCreateOneInput {
  create?: Maybe<OwnerCreateInput>;
  connect?: Maybe<OwnerWhereUniqueInput>;
}

export interface RepositoryUpdateManyMutationInput {
  name?: Maybe<String>;
  service?: Maybe<RepositoryServiceType>;
}

export interface CommitUpdateManyDataInput {
  committedDate?: Maybe<DateTimeInput>;
  hash?: Maybe<String>;
  message?: Maybe<String>;
  messageHeadline?: Maybe<String>;
  status?: Maybe<CommitStatus>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CommitCreateInput {
  id?: Maybe<ID_Input>;
  author?: Maybe<UserCreateManyInput>;
  committedDate: DateTimeInput;
  hash: String;
  message: String;
  messageHeadline: String;
  status?: Maybe<CommitStatus>;
}

export interface CommitScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  committedDate?: Maybe<DateTimeInput>;
  committedDate_not?: Maybe<DateTimeInput>;
  committedDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  committedDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  committedDate_lt?: Maybe<DateTimeInput>;
  committedDate_lte?: Maybe<DateTimeInput>;
  committedDate_gt?: Maybe<DateTimeInput>;
  committedDate_gte?: Maybe<DateTimeInput>;
  hash?: Maybe<String>;
  hash_not?: Maybe<String>;
  hash_in?: Maybe<String[] | String>;
  hash_not_in?: Maybe<String[] | String>;
  hash_lt?: Maybe<String>;
  hash_lte?: Maybe<String>;
  hash_gt?: Maybe<String>;
  hash_gte?: Maybe<String>;
  hash_contains?: Maybe<String>;
  hash_not_contains?: Maybe<String>;
  hash_starts_with?: Maybe<String>;
  hash_not_starts_with?: Maybe<String>;
  hash_ends_with?: Maybe<String>;
  hash_not_ends_with?: Maybe<String>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  messageHeadline?: Maybe<String>;
  messageHeadline_not?: Maybe<String>;
  messageHeadline_in?: Maybe<String[] | String>;
  messageHeadline_not_in?: Maybe<String[] | String>;
  messageHeadline_lt?: Maybe<String>;
  messageHeadline_lte?: Maybe<String>;
  messageHeadline_gt?: Maybe<String>;
  messageHeadline_gte?: Maybe<String>;
  messageHeadline_contains?: Maybe<String>;
  messageHeadline_not_contains?: Maybe<String>;
  messageHeadline_starts_with?: Maybe<String>;
  messageHeadline_not_starts_with?: Maybe<String>;
  messageHeadline_ends_with?: Maybe<String>;
  messageHeadline_not_ends_with?: Maybe<String>;
  status?: Maybe<CommitStatus>;
  status_not?: Maybe<CommitStatus>;
  status_in?: Maybe<CommitStatus[] | CommitStatus>;
  status_not_in?: Maybe<CommitStatus[] | CommitStatus>;
  AND?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  OR?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  NOT?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
}

export interface UserCreateManyInput {
  create?: Maybe<UserCreateInput[] | UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export type RepositoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  handle: String;
}

export interface CommitUpdateWithWhereUniqueNestedInput {
  where: CommitWhereUniqueInput;
  data: CommitUpdateDataInput;
}

export interface CommitUpdateInput {
  author?: Maybe<UserUpdateManyInput>;
  committedDate?: Maybe<DateTimeInput>;
  hash?: Maybe<String>;
  message?: Maybe<String>;
  messageHeadline?: Maybe<String>;
  status?: Maybe<CommitStatus>;
}

export interface CommitUpdateManyInput {
  create?: Maybe<CommitCreateInput[] | CommitCreateInput>;
  update?: Maybe<
    | CommitUpdateWithWhereUniqueNestedInput[]
    | CommitUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CommitUpsertWithWhereUniqueNestedInput[]
    | CommitUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  connect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  set?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  disconnect?: Maybe<CommitWhereUniqueInput[] | CommitWhereUniqueInput>;
  deleteMany?: Maybe<CommitScalarWhereInput[] | CommitScalarWhereInput>;
  updateMany?: Maybe<
    | CommitUpdateManyWithWhereNestedInput[]
    | CommitUpdateManyWithWhereNestedInput
  >;
}

export interface RepositoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  owner: OwnerCreateOneInput;
  service?: Maybe<RepositoryServiceType>;
  commits?: Maybe<CommitCreateManyInput>;
}

export interface OwnerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OwnerWhereInput>;
  AND?: Maybe<OwnerSubscriptionWhereInput[] | OwnerSubscriptionWhereInput>;
  OR?: Maybe<OwnerSubscriptionWhereInput[] | OwnerSubscriptionWhereInput>;
  NOT?: Maybe<OwnerSubscriptionWhereInput[] | OwnerSubscriptionWhereInput>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface CommitSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommitWhereInput>;
  AND?: Maybe<CommitSubscriptionWhereInput[] | CommitSubscriptionWhereInput>;
  OR?: Maybe<CommitSubscriptionWhereInput[] | CommitSubscriptionWhereInput>;
  NOT?: Maybe<CommitSubscriptionWhereInput[] | CommitSubscriptionWhereInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  handle?: Maybe<String>;
}

export type OwnerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  handle?: Maybe<String>;
}>;

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CommitUpdateManyWithWhereNestedInput {
  where: CommitScalarWhereInput;
  data: CommitUpdateManyDataInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface CommitUpdateDataInput {
  author?: Maybe<UserUpdateManyInput>;
  committedDate?: Maybe<DateTimeInput>;
  hash?: Maybe<String>;
  message?: Maybe<String>;
  messageHeadline?: Maybe<String>;
  status?: Maybe<CommitStatus>;
}

export interface OwnerUpdateManyMutationInput {
  handle?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface OwnerUpdateInput {
  handle?: Maybe<String>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  handle?: Maybe<String>;
}

export interface OrganizationCreateInput {
  id?: Maybe<ID_Input>;
  users?: Maybe<UserCreateManyInput>;
  handle: String;
}

export interface OrganizationUpdateManyMutationInput {
  handle?: Maybe<String>;
}

export interface OwnerCreateInput {
  id?: Maybe<ID_Input>;
  handle: String;
}

export interface CommitUpdateManyMutationInput {
  committedDate?: Maybe<DateTimeInput>;
  hash?: Maybe<String>;
  message?: Maybe<String>;
  messageHeadline?: Maybe<String>;
  status?: Maybe<CommitStatus>;
}

export interface OwnerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  handle?: Maybe<String>;
  handle_not?: Maybe<String>;
  handle_in?: Maybe<String[] | String>;
  handle_not_in?: Maybe<String[] | String>;
  handle_lt?: Maybe<String>;
  handle_lte?: Maybe<String>;
  handle_gt?: Maybe<String>;
  handle_gte?: Maybe<String>;
  handle_contains?: Maybe<String>;
  handle_not_contains?: Maybe<String>;
  handle_starts_with?: Maybe<String>;
  handle_not_starts_with?: Maybe<String>;
  handle_ends_with?: Maybe<String>;
  handle_not_ends_with?: Maybe<String>;
  AND?: Maybe<OwnerWhereInput[] | OwnerWhereInput>;
  OR?: Maybe<OwnerWhereInput[] | OwnerWhereInput>;
  NOT?: Maybe<OwnerWhereInput[] | OwnerWhereInput>;
}

export interface OrganizationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrganizationWhereInput>;
  AND?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  OR?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    OrganizationSubscriptionWhereInput[] | OrganizationSubscriptionWhereInput
  >;
}

export interface RepositoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  owner?: Maybe<OwnerWhereInput>;
  service?: Maybe<RepositoryServiceType>;
  service_not?: Maybe<RepositoryServiceType>;
  service_in?: Maybe<RepositoryServiceType[] | RepositoryServiceType>;
  service_not_in?: Maybe<RepositoryServiceType[] | RepositoryServiceType>;
  commits_every?: Maybe<CommitWhereInput>;
  commits_some?: Maybe<CommitWhereInput>;
  commits_none?: Maybe<CommitWhereInput>;
  AND?: Maybe<RepositoryWhereInput[] | RepositoryWhereInput>;
  OR?: Maybe<RepositoryWhereInput[] | RepositoryWhereInput>;
  NOT?: Maybe<RepositoryWhereInput[] | RepositoryWhereInput>;
}

export interface CommitUpsertWithWhereUniqueNestedInput {
  where: CommitWhereUniqueInput;
  update: CommitUpdateDataInput;
  create: CommitCreateInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name?: String;
  handle: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  handle: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  handle: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrganization {
  count: Int;
}

export interface AggregateOrganizationPromise
  extends Promise<AggregateOrganization>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrganizationSubscription
  extends Promise<AsyncIterator<AggregateOrganization>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommitConnection {
  pageInfo: PageInfo;
  edges: CommitEdge[];
}

export interface CommitConnectionPromise
  extends Promise<CommitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommitEdge>>() => T;
  aggregate: <T = AggregateCommitPromise>() => T;
}

export interface CommitConnectionSubscription
  extends Promise<AsyncIterator<CommitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommitSubscription>() => T;
}

export interface OrganizationEdge {
  node: Organization;
  cursor: String;
}

export interface OrganizationEdgePromise
  extends Promise<OrganizationEdge>,
    Fragmentable {
  node: <T = OrganizationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrganizationEdgeSubscription
  extends Promise<AsyncIterator<OrganizationEdge>>,
    Fragmentable {
  node: <T = OrganizationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CommitEdge {
  node: Commit;
  cursor: String;
}

export interface CommitEdgePromise extends Promise<CommitEdge>, Fragmentable {
  node: <T = CommitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommitEdgeSubscription
  extends Promise<AsyncIterator<CommitEdge>>,
    Fragmentable {
  node: <T = CommitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  email: String;
  name?: String;
  handle: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  handle: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  handle: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  handle: () => Promise<String>;
}

export interface OrganizationConnection {
  pageInfo: PageInfo;
  edges: OrganizationEdge[];
}

export interface OrganizationConnectionPromise
  extends Promise<OrganizationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrganizationEdge>>() => T;
  aggregate: <T = AggregateOrganizationPromise>() => T;
}

export interface OrganizationConnectionSubscription
  extends Promise<AsyncIterator<OrganizationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrganizationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrganizationSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface RepositoryPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  service: RepositoryServiceType;
}

export interface RepositoryPreviousValuesPromise
  extends Promise<RepositoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  service: () => Promise<RepositoryServiceType>;
}

export interface RepositoryPreviousValuesSubscription
  extends Promise<AsyncIterator<RepositoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  service: () => Promise<AsyncIterator<RepositoryServiceType>>;
}

export interface RepositoryEdge {
  node: Repository;
  cursor: String;
}

export interface RepositoryEdgePromise
  extends Promise<RepositoryEdge>,
    Fragmentable {
  node: <T = RepositoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface RepositoryEdgeSubscription
  extends Promise<AsyncIterator<RepositoryEdge>>,
    Fragmentable {
  node: <T = RepositorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface RepositorySubscriptionPayload {
  mutation: MutationType;
  node: Repository;
  updatedFields: String[];
  previousValues: RepositoryPreviousValues;
}

export interface RepositorySubscriptionPayloadPromise
  extends Promise<RepositorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RepositoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RepositoryPreviousValuesPromise>() => T;
}

export interface RepositorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RepositorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RepositorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RepositoryPreviousValuesSubscription>() => T;
}

export interface Commit {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  committedDate: DateTimeOutput;
  hash: String;
  message: String;
  messageHeadline: String;
  status: CommitStatus;
}

export interface CommitPromise extends Promise<Commit>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  committedDate: () => Promise<DateTimeOutput>;
  hash: () => Promise<String>;
  message: () => Promise<String>;
  messageHeadline: () => Promise<String>;
  status: () => Promise<CommitStatus>;
}

export interface CommitSubscription
  extends Promise<AsyncIterator<Commit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  author: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  committedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  hash: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  messageHeadline: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<CommitStatus>>;
}

export interface CommitNullablePromise
  extends Promise<Commit | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  author: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  committedDate: () => Promise<DateTimeOutput>;
  hash: () => Promise<String>;
  message: () => Promise<String>;
  messageHeadline: () => Promise<String>;
  status: () => Promise<CommitStatus>;
}

export interface CommitSubscriptionPayload {
  mutation: MutationType;
  node: Commit;
  updatedFields: String[];
  previousValues: CommitPreviousValues;
}

export interface CommitSubscriptionPayloadPromise
  extends Promise<CommitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommitPreviousValuesPromise>() => T;
}

export interface CommitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommitPreviousValuesSubscription>() => T;
}

export interface Repository {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  service: RepositoryServiceType;
}

export interface RepositoryPromise extends Promise<Repository>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  owner: <T = OwnerPromise>() => T;
  service: () => Promise<RepositoryServiceType>;
  commits: <T = FragmentableArray<Commit>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RepositorySubscription
  extends Promise<AsyncIterator<Repository>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  owner: <T = OwnerSubscription>() => T;
  service: () => Promise<AsyncIterator<RepositoryServiceType>>;
  commits: <T = Promise<AsyncIterator<CommitSubscription>>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface RepositoryNullablePromise
  extends Promise<Repository | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  owner: <T = OwnerPromise>() => T;
  service: () => Promise<RepositoryServiceType>;
  commits: <T = FragmentableArray<Commit>>(args?: {
    where?: CommitWhereInput;
    orderBy?: CommitOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CommitPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  committedDate: DateTimeOutput;
  hash: String;
  message: String;
  messageHeadline: String;
  status: CommitStatus;
}

export interface CommitPreviousValuesPromise
  extends Promise<CommitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  committedDate: () => Promise<DateTimeOutput>;
  hash: () => Promise<String>;
  message: () => Promise<String>;
  messageHeadline: () => Promise<String>;
  status: () => Promise<CommitStatus>;
}

export interface CommitPreviousValuesSubscription
  extends Promise<AsyncIterator<CommitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  committedDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  hash: () => Promise<AsyncIterator<String>>;
  message: () => Promise<AsyncIterator<String>>;
  messageHeadline: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<CommitStatus>>;
}

export interface OwnerEdge {
  node: Owner;
  cursor: String;
}

export interface OwnerEdgePromise extends Promise<OwnerEdge>, Fragmentable {
  node: <T = OwnerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OwnerEdgeSubscription
  extends Promise<AsyncIterator<OwnerEdge>>,
    Fragmentable {
  node: <T = OwnerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Organization {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  handle: String;
}

export interface OrganizationPromise
  extends Promise<Organization>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  handle: () => Promise<String>;
}

export interface OrganizationSubscription
  extends Promise<AsyncIterator<Organization>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  handle: () => Promise<AsyncIterator<String>>;
}

export interface OrganizationNullablePromise
  extends Promise<Organization | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  handle: () => Promise<String>;
}

export interface Owner {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  handle: String;
}

export interface OwnerPromise extends Promise<Owner>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
}

export interface OwnerSubscription
  extends Promise<AsyncIterator<Owner>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  handle: () => Promise<AsyncIterator<String>>;
}

export interface OwnerNullablePromise
  extends Promise<Owner | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
}

export interface OrganizationSubscriptionPayload {
  mutation: MutationType;
  node: Organization;
  updatedFields: String[];
  previousValues: OrganizationPreviousValues;
}

export interface OrganizationSubscriptionPayloadPromise
  extends Promise<OrganizationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrganizationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrganizationPreviousValuesPromise>() => T;
}

export interface OrganizationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrganizationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrganizationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrganizationPreviousValuesSubscription>() => T;
}

export interface AggregateRepository {
  count: Int;
}

export interface AggregateRepositoryPromise
  extends Promise<AggregateRepository>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRepositorySubscription
  extends Promise<AsyncIterator<AggregateRepository>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface OwnerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  handle: String;
}

export interface OwnerPreviousValuesPromise
  extends Promise<OwnerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
}

export interface OwnerPreviousValuesSubscription
  extends Promise<AsyncIterator<OwnerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  handle: () => Promise<AsyncIterator<String>>;
}

export interface OwnerSubscriptionPayload {
  mutation: MutationType;
  node: Owner;
  updatedFields: String[];
  previousValues: OwnerPreviousValues;
}

export interface OwnerSubscriptionPayloadPromise
  extends Promise<OwnerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OwnerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OwnerPreviousValuesPromise>() => T;
}

export interface OwnerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OwnerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OwnerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OwnerPreviousValuesSubscription>() => T;
}

export interface AggregateCommit {
  count: Int;
}

export interface AggregateCommitPromise
  extends Promise<AggregateCommit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommitSubscription
  extends Promise<AsyncIterator<AggregateCommit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrganizationPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  handle: String;
}

export interface OrganizationPreviousValuesPromise
  extends Promise<OrganizationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  handle: () => Promise<String>;
}

export interface OrganizationPreviousValuesSubscription
  extends Promise<AsyncIterator<OrganizationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  handle: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOwner {
  count: Int;
}

export interface AggregateOwnerPromise
  extends Promise<AggregateOwner>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOwnerSubscription
  extends Promise<AsyncIterator<AggregateOwner>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RepositoryConnection {
  pageInfo: PageInfo;
  edges: RepositoryEdge[];
}

export interface RepositoryConnectionPromise
  extends Promise<RepositoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RepositoryEdge>>() => T;
  aggregate: <T = AggregateRepositoryPromise>() => T;
}

export interface RepositoryConnectionSubscription
  extends Promise<AsyncIterator<RepositoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RepositoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRepositorySubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface OwnerConnection {
  pageInfo: PageInfo;
  edges: OwnerEdge[];
}

export interface OwnerConnectionPromise
  extends Promise<OwnerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OwnerEdge>>() => T;
  aggregate: <T = AggregateOwnerPromise>() => T;
}

export interface OwnerConnectionSubscription
  extends Promise<AsyncIterator<OwnerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OwnerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOwnerSubscription>() => T;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: 'CommitStatus',
    embedded: false
  },
  {
    name: 'Commit',
    embedded: false
  },
  {
    name: 'Organization',
    embedded: false
  },
  {
    name: 'Owner',
    embedded: false
  },
  {
    name: 'RepositoryServiceType',
    embedded: false
  },
  {
    name: 'Repository',
    embedded: false
  },
  {
    name: 'User',
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `${process.env['PRISMA_SECRET']}`
});
export const prisma = new Prisma();
