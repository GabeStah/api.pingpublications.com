// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { Commit, User, Organization, Repository } from './client/index';
import { Context } from '../types';

export type CommitStatus = 'Pending' | 'Processed';
export type RepositoryServiceType = 'GitHub' | 'GitLab' | 'Bitbucket';

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsFilterCommits {
    hash?: string | null;
  }

  export interface ArgsCommit {
    id: string;
  }

  export interface ArgsOrganization {
    id: string;
  }

  export interface ArgsRepository {
    id: string;
  }

  export type FilterCommitsResolver =
    | ((
        parent: undefined,
        args: ArgsFilterCommits,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Commit[] | Promise<Commit[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsFilterCommits,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Commit[] | Promise<Commit[]>;
      };

  export type CommitResolver =
    | ((
        parent: undefined,
        args: ArgsCommit,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Commit | null | Promise<Commit | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCommit,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Commit | null | Promise<Commit | null>;
      };

  export type OrganizationResolver =
    | ((
        parent: undefined,
        args: ArgsOrganization,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Organization | null | Promise<Organization | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsOrganization,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Organization | null | Promise<Organization | null>;
      };

  export type RepositoryResolver =
    | ((
        parent: undefined,
        args: ArgsRepository,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Repository | null | Promise<Repository | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsRepository,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Repository | null | Promise<Repository | null>;
      };

  export interface Type {
    filterCommits:
      | ((
          parent: undefined,
          args: ArgsFilterCommits,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Commit[] | Promise<Commit[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsFilterCommits,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Commit[] | Promise<Commit[]>;
        };

    commit:
      | ((
          parent: undefined,
          args: ArgsCommit,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Commit | null | Promise<Commit | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCommit,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Commit | null | Promise<Commit | null>;
        };

    organization:
      | ((
          parent: undefined,
          args: ArgsOrganization,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Organization | null | Promise<Organization | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsOrganization,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Organization | null | Promise<Organization | null>;
        };

    repository:
      | ((
          parent: undefined,
          args: ArgsRepository,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Repository | null | Promise<Repository | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsRepository,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Repository | null | Promise<Repository | null>;
        };
  }
}

export namespace CommitResolvers {
  export const defaultResolvers = {
    id: (parent: Commit) => parent.id,
    createdAt: (parent: Commit) => parent.createdAt,
    updatedAt: (parent: Commit) => parent.updatedAt,
    committedDate: (parent: Commit) => parent.committedDate,
    hash: (parent: Commit) => parent.hash,
    message: (parent: Commit) => parent.message,
    messageHeadline: (parent: Commit) => parent.messageHeadline,
    status: (parent: Commit) => parent.status
  };

  export type IdResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type AuthorResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>;
      };

  export type CommittedDateResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type HashResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MessageResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type MessageHeadlineResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type StatusResolver =
    | ((
        parent: Commit,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => CommitStatus | Promise<CommitStatus>)
    | {
        fragment: string;
        resolve: (
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CommitStatus | Promise<CommitStatus>;
      };

  export interface Type {
    id:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    author:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>;
        };

    committedDate:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    hash:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    message:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    messageHeadline:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    status:
      | ((
          parent: Commit,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => CommitStatus | Promise<CommitStatus>)
      | {
          fragment: string;
          resolve: (
            parent: Commit,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => CommitStatus | Promise<CommitStatus>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    createdAt: (parent: User) => parent.createdAt,
    updatedAt: (parent: User) => parent.updatedAt,
    email: (parent: User) => parent.email,
    name: (parent: User) => (parent.name === undefined ? null : parent.name),
    handle: (parent: User) => parent.handle
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | null | Promise<string | null>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>;
      };

  export type HandleResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | null | Promise<string | null>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | null | Promise<string | null>;
        };

    handle:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace OrganizationResolvers {
  export const defaultResolvers = {
    id: (parent: Organization) => parent.id,
    createdAt: (parent: Organization) => parent.createdAt,
    updatedAt: (parent: Organization) => parent.updatedAt,
    handle: (parent: Organization) => parent.handle
  };

  export type IdResolver =
    | ((
        parent: Organization,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Organization,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Organization,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UsersResolver =
    | ((
        parent: Organization,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string;
        resolve: (
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>;
      };

  export type HandleResolver =
    | ((
        parent: Organization,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    id:
      | ((
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Organization,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Organization,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Organization,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    users:
      | ((
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string;
          resolve: (
            parent: Organization,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>;
        };

    handle:
      | ((
          parent: Organization,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Organization,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export namespace RepositoryResolvers {
  export const defaultResolvers = {
    id: (parent: Repository) => parent.id,
    createdAt: (parent: Repository) => parent.createdAt,
    updatedAt: (parent: Repository) => parent.updatedAt,
    name: (parent: Repository) => parent.name,
    service: (parent: Repository) => parent.service
  };

  export type IdResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type CreatedAtResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UpdatedAtResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type OwnerResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type ServiceResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => RepositoryServiceType | Promise<RepositoryServiceType>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RepositoryServiceType | Promise<RepositoryServiceType>;
      };

  export type CommitsResolver =
    | ((
        parent: Repository,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Commit[] | Promise<Commit[]>)
    | {
        fragment: string;
        resolve: (
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Commit[] | Promise<Commit[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    createdAt:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    updatedAt:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    owner:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    service:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => RepositoryServiceType | Promise<RepositoryServiceType>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => RepositoryServiceType | Promise<RepositoryServiceType>;
        };

    commits:
      | ((
          parent: Repository,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Commit[] | Promise<Commit[]>)
      | {
          fragment: string;
          resolve: (
            parent: Repository,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Commit[] | Promise<Commit[]>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsDeleteRepository {
    id: string;
  }

  export type DeleteRepositoryResolver =
    | ((
        parent: undefined,
        args: ArgsDeleteRepository,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Repository | null | Promise<Repository | null>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsDeleteRepository,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Repository | null | Promise<Repository | null>;
      };

  export interface Type {
    deleteRepository:
      | ((
          parent: undefined,
          args: ArgsDeleteRepository,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Repository | null | Promise<Repository | null>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsDeleteRepository,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Repository | null | Promise<Repository | null>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Commit: CommitResolvers.Type;
  User: UserResolvers.Type;
  Organization: OrganizationResolvers.Type;
  Repository: RepositoryResolvers.Type;
  Mutation: MutationResolvers.Type;
}

// @ts-ignore
declare module 'graphql-tools' {
  interface IResolvers extends Resolvers {}
}
